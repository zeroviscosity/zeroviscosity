extends ../../post

block content
  section.panel
    h3 TL;DR
    p This post is part of a series that explores some key concepts in D3.js by building up an example, step by step, from a bare-bones pie chart to an interactive, animated donut chart that loads external data. For the enough-with-the-jibber-jabber-show-me-the-code types out there, here's a breakdown of the steps we'll be covering:
    ul
      li <a href="/d3-js-step-by-step/step-0-intro">Step 0: Intro</a>
      li <a href="/d3-js-step-by-step/step-1-a-basic-pie-chart">Step 1: A Basic Pie Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-1-a-basic-pie-chart.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-1-a-basic-pie-chart.html" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-2-a-basic-donut-chart">Step 2: A Basic Donut Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-2-a-basic-donut-chart.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-2-a-basic-donut-chart.html" target="_blank">Demo</a>)
      li.bold <a href="/d3-js-step-by-step/step-3-adding-a-legend">Step 3: Adding a Legend</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-3-adding-a-legend.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-3-adding-a-legend.html" target="_blank">Demo</a>) &larr; You Are Here
      li <a href="/d3-js-step-by-step/step-4-loading-external-data">Step 4: Loading External Data</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-4-loading-external-data.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-4-loading-external-data.html" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-5-adding-tooltips">Step 5: Adding Tooltips</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-5-adding-tooltips.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-5-adding-tooltips.html" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-6-animating-interactivity">Step 6: Animating Interactivity</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-6-animating-interactivity.html" target="_blank">Code</a> | <a href="/static/d3-js-step-by-step/step-6-animating-interactivity.html" target="_blank">Demo</a>)
    p <strong>NOTE:</strong> Because we're building things up step by step, the source code contains <code>NEW</code>, <code>UPDATED</code> and <code>REMOVED</code> comments to annotate the lines that have been added, altered or deleted relateive to the previous step.

  section
    p So we have a swanky donut chart, but how are we supposed to know what each segment represents? It's time to add a legend <span class="image-wrapper" data-width="440" data-height="305" data-s3-src="#{category.slug}/#{post.slug}/legend.jpg"></span>, and we may as well make use of the white space we created when we switched to a donut:
    iframe.centered(src="/static/d3-js-step-by-step/step-3-adding-a-legend.html", height="380", width="380", border="0", seamless)
    p  If we were to inspect the markup, we would see something like this:
    pre#markup-legend
      code.html
        :code
          <g class="legend" transform="translate(-36,-44)">
            <rect width="18" height="18" style="fill: rgb(57, 59, 121); stroke: rgb(57, 59, 121);"></rect>
            <text x="22" y="14">Abulia</text>
          </g>
          <g class="legend" transform="translate(-36,-22)">
            <rect width="18" height="18" style="fill: rgb(82, 84, 163); stroke: rgb(82, 84, 163);"></rect>
            <text x="22" y="14">Betelgeuse</text>
          </g>
          <g class="legend" transform="translate(-36,0)">
            <rect width="18" height="18" style="fill: rgb(107, 110, 207); stroke: rgb(107, 110, 207);"></rect>
            <text x="22" y="14">Cantaloupe</text>
          </g>
          <g class="legend" transform="translate(-36,22)">
            <rect width="18" height="18" style="fill: rgb(156, 158, 222); stroke: rgb(156, 158, 222);"></rect>
            <text x="22" y="14">Dijkstra</text>
          </g>
    p These <code>g</code> elements come after the <code>path</code> elements that we created in <a href="/d3-js-step-by-step/step-1-a-basic-pie-chart">Step 1</a>. The coloured squares and text labels are defined by <code>rect</code> and <code>text</code> elements, respectively. This seems straightforward enough. The only tricky bit is the amount by which each <code>g</code> has been translated, but we'll get to that soon enough.
    p Before we proceed any further, an important thing to note is that we've gotten this far without employing any CSS at all <span class="image-wrapper" data-width="460" data-height="345" data-s3-src="#{category.slug}/#{post.slug}/css.gif"></span>. (You may have noticed the <code>normalize.css</code> file in the full code, but that's just there to do things like strip the margin from the body; it hasn't directly affected our example.) We're going to start this step by defining our first styles:
    pre
      code.html
        :code
          <style>
            .legend {
              font-size: 12px;
            }
            rect {
              stroke-width: 2;
            }
          </style>:
    p This isn't even strictly necessary but it will help make our legend a little prettier. If you've ever done any CSS before, the first declaration should be familiar. The second might look a little weird, although you will recognize <code>rect</code> from the <a href="#markup-legend">markup</a> above. Settings <stroke-width</code> to 2 means that it will have a 2px-wide border.
    p Next we're going to define a couple of size variables so we don't have to hard code any numbers:
    pre
      code.javascript.
        var legendRectSize = 18;
        var legendSpacing = 4;
    p <code>legendRectSize</code> defines the size of the coloured squares you can see above. <code>legendSpacing</code>, not surprisingly, will be used to provide spacing. Now for the meat of it:
    pre
      code.javascript.
        var legend = svg.selectAll('.legend')
          .data(color.domain())
          .enter()
          .append('g')
          .attr('class', 'legend')
          .attr('transform', function(d, i) {
            var height = legendRectSize + legendSpacing;
            var offset =  height * color.domain().length / 2;
            var horz = -2 * legendRectSize;
            var vert = i * height - offset;
            return 'translate(' + horz + ',' + vert + ')';
          });
    p This should look rather familiar. Once again we see the <code>.selectAll(el).data(data).enter().append(el)</code> pattern. And once again, let's take it line by line:
    ol
      li We begin by selecting elements with class <em>legend</em>, which is arbitrarily&mdash;albeit appropriately&mdash;named.
      li We call <code>data()</code> with the domain of our <code>color</code> variable. You may recall that in creating the <code>path</code> elements, we defined the <code>fill</code> attribute using <code>color(d.data.label)</code>. So <code>color.domain()</code> actually refers to an array of labels from our dataset.
      li <code>enter()</code> creates placeholders.
      li We replace our placeholders with <code>g</code> elements.
      li Each <code>g</code> is given a <em>legend</em> class.
      li This last bit isn't something we need to dwell on. I'll go over it in detail but it's just figuring out how to center the legend. We specify how to position each element as follows (keeping in mind that we're operating relative to the <em>center</em> of the SVG rather than the top left corner):
        ol
          li The height of the element is the height of the coloured square plus the spacing.
          li The vertical offset of the <em>entire</em> legend is calculated using the height of a single element and half the total number of elements.
          li The horizontal position&mdash;that is, the left edge of the element&mdash;is shifted left of center by a (somewhat arbitrary) distance equal to the width of two coloured squares. This is meant to provide room for the text.
          li The vertical position&mdash; that is, the top edge of the element&mdash;is shifted up or down from center using the offset defined earlier and the index, <code>i</code>, of the current element, which D3 passes in as the second argument. 
          li Finally we return the translation.
    p As I mentioned, we needn't worry too much about that last part. The key takeaway is:
    blockquote#key-point-3 When iterating over a dataset, D3 provides the index of the current entry as the second parameter to the callback.
    p Now all that remains is to actually add the coloured square and the label. We'll start with the former:
    pre
      code.javascript.
        legend.append('rect')
          .attr('width', legendRectSize)
          .attr('height', legendRectSize)
          .style('fill', color)
          .style('stroke', color);
    p This is straightforward enough that I don't think we need to go over it line by line. I will, however, comment that the <code>fill</code> and <code>stroke</code> are each passed <code>color</code>, from which they can retrieve the appropriate colour for the background and border. Each legend element will pass its label into <code>color()</code>; for instance, the first one will call <code>color('Abulia')</code> and be given <code>#393b79</code> in return.
    p Now for the last part of the legend, the text:
    pre
      code.javascript.
        legend.append('text')
          .attr('x', legendRectSize + legendSpacing)
          .attr('y', legendRectSize - legendSpacing)
          .text(function(d) { return d; });
    p Given the <a href="#markup-legend">markup</a> above, this shouldn't be too surprising. The <code>x</code> and <code>y</code> attributes use the spacing and the size of the coloured square to determine their position <em>relative to the cotainer</em>, the <code>g</code> element with class <em>legend</em>. As such, these attributes are the same for all elements in the legend. Finally, for the <code>text()</code>, we can just give it an identity function becuase we don't need to alter the labels in any way. If, for example, we wanted the to be all uppercase, we could do the following:
    pre
      code.javascript.
        // Alternative
        legend.append('text')
          .attr('x', legendRectSize + legendSpacing)
          .attr('y', legendRectSize - legendSpacing)
          .text(function(d) { return d.toUpperCase(); });
    p So that brings us to the end of our legend. There was a fair bit to it given that we wanted to center it inside the donut. It's worth reiterating that we saw the <code>.selectAll(el).data(data).enter().append(el)</code> pattern come up again. We won't run into it again in this post but I guarantee you'll see it if you start looking at other D3 examples. Now it's time to move on to <a href="/d3-js-step-by-step/step-4-loading-external-data">Step 4</a>, but first, here's the updated code in case you're interested:
    div.lazy-code(data-src="/static/d3-js-step-by-step/step-3-adding-a-legend.html", data-language="html")
      button.expand.small.secondary Display Full Code for Step 3

