extends ../../post

block content
  section.panel
    h3 TL;DR
    p This post is part of a series that explores some key concepts in D3.js by building up an example, step by step, from a bare-bones pie chart to an interactive, animated donut chart that loads external data. For the enough-with-the-jibber-jabber-show-me-the-code types out there, here's a breakdown of the steps we'll be covering:
    ul
      li <a href="/d3-js-step-by-step/step-0-intro">Step 0: Intro</a>
      li <a href="/d3-js-step-by-step/step-1-a-basic-pie-chart">Step 1: A Basic Pie Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-1-a-basic-pie-chart.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/kgukfV?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-2-a-basic-donut-chart">Step 2: A Basic Donut Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-2-a-basic-donut-chart.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/Zfv7x6?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-3-adding-a-legend">Step 3: Adding a Legend</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-3-adding-a-legend.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/gE1xQu?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-4-loading-external-data">Step 4: Loading External Data</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-4-loading-external-data.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/3naIzX?p=info" target="_blank">Demo</a>)
      li.bold <a href="/d3-js-step-by-step/step-5-adding-tooltips">Step 5: Adding Tooltips</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-5-adding-tooltips.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/44O53d?p=info" target="_blank">Demo</a>) &larr; You Are Here
      li <a href="/d3-js-step-by-step/step-6-animating-interactivity">Step 6: Animating Interactivity</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-6-animating-interactivity.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/x1xD82?p=info" target="_blank">Demo</a>)
    p <strong>NOTE:</strong> Because we're building things up step by step, the source code contains <code>NEW</code>, <code>UPDATED</code> and <code>REMOVED</code> comments to annotate the lines that have been added, altered or deleted relative to the previous step.

  section
    p One thing you may have noticed about this new dataset is that the segments are all similarly sized <span class="image-wrapper" data-width="500" data-height="360" data-src="/img/#{category.slug}/#{post.slug}/optical-illusion-cats.jpg"></span>. One thing we could do to help clarify the relative sizes&mdash;apart from switching to a bar chart&mdash;is provide tooltips with additional information. You can see it in action here:
    iframe.centered(src="/static/d3-js-step-by-step/step-5-adding-tooltips.html", height="380", width="380", border="0", seamless)
    p When you hover over one of the sections, a tooltip appears with the weekday, the total number of tickets issued on that day, and the percentage of the total that number represents. In this case the tooltip stays fixed in place, however we'll see how to make it move with the mouse.
    p First we need to define some more CSS: 
    pre
      code.css.
        #chart {
          height: 360px;
          position: relative;
          width: 360px;
        }
    p This is the first time we've botherd adding any styles to the <code>div</code> that wraps the SVG. We're setting it to the same dimensions as the chart itself and setting <code>position: relative;</code> so that the tooltip can be positioned absolutely relative to the container rather than to the body. Now for the tooltip itself:
    pre
      code.css.
        .tooltip {
          background: #eee;
          box-shadow: 0 0 5px #999999;
          color: #333;
          display: none;
          font-size: 12px;
          left: 130px;
          padding: 10px;
          position: absolute;
          text-align: center;
          top: 95px;
          width: 80px;
          z-index: 10;
        }
    p This is pretty standard if you're familiar with CSS. (I like to order my CSS properties alphabetically, which may not be to everyone's taste.) The main properties to take note of are <code>left</code> and <code>top</code>, as their values are specific to the size of the chart. They are meant to position the tooltip centered at the top of the donut hole. Also note that we've set <code>display: none;</code> so that it doesn't appear by default.
    p With the CSS taken care of, we can add the tooltip itself. We're just going to add one tooltip element and reuse it for all the segments of the chart:
    pre
      code.javascript.
        // ...
        // More code
        // ...

        var tooltip = d3.select('#chart')            // NEW 
          .append('div')                             // NEW
          .attr('class', 'tooltip');                 // NEW
        
        tooltip.append('div')                        // NEW
          .attr('class', 'label');                   // NEW

        tooltip.append('div')                        // NEW
          .attr('class', 'count');                   // NEW

        tooltip.append('div')                        // NEW
          .attr('class', 'percent');                 // NEW

        d3.csv('weekdays.csv', function(error, dataset) {
          // ...
          // More code
          // ...
        });
    p Because this bit of code doesn't depend on the data, we can put it outside the callback. We start by adding a <code>div</code> with class <em>tooltip</em> to the container, and then add three <code>div</code> elements to it, one after the other, with classes <em>label</em>, <em>count</em> and <em>percent</em>, respectively. Note that I used a class for <em>tooltip</em> instead of an id in case I wanted more than one chart on the page and needed to reuse the tooltip styles.
    p Now it's time for the mouse event handlers. These will be attached to <code>path</code> so they need to come after its definition inside the callback:
    pre
      code.javascript.
        var path = svg.selectAll('path')
          .data(pie(dataset))
          .enter()
          .append('path')
          .attr('d', arc)
          .attr('fill', function(d, i) { 
            return color(d.data.label); 
          });

        path.on('mouseover', function(d) {           // NEW
          // Code                                    // NEW
        });                                          // NEW

        path.on('mouseout', function(d) {            // NEW
          // Code                                    // NEW
        });                                          // NEW
    p Let's take a look at the <code>mouseover</code> event handler:
    pre
      code.javascript.
        path.on('mouseover', function(d) {
          var total = d3.sum(dataset.map(function(d) {
            return d.count;
          }));
          var percent = Math.round(1000 * d.data.count / total) / 10;
          tooltip.select('.label').html(d.data.label);
          tooltip.select('.count').html(d.data.count); 
          tooltip.select('.percent').html(percent + '%'); 
          tooltip.style('display', 'block');
        });
    p The first thing we do is calculate the total number of tickets in the dataset. We do this by extracting the <code>count</code> value from each entry and then using D3's <code>sum()</code> function to add them up. (You may be thinking that this is inefficent: why not calculate the total when we first load the data and then just reuse that value? If this were the final step, that's what we would do. However in the <a href="/d3-js-step-by-step/step-6-animating-interactivity">next step</a> we'll be adding filtering, so the total will no longer be fixed.)
    p Once we have the total, we can determine what percent the current segment represents. Then we can update the tooltip's three <code>div</code> elements with the label, count and percent, and finally switch it from <code>display: none;</code> to <code>display: block;</code>.
    p The tooltip will now appear when we hover over a segment, but we need it to disappear when we stop hovering. That's where the <code>mouseout</code> event handler comes in:
    pre
      code.javascript.
        path.on('mouseout', function() {
          tooltip.style('display', 'none');
        });
    p This one is as simple as it gets. I don't think it needs any explanation. Instead let's look at an optional event handler, <code>mousemove</code>:
    pre
      code.javascript.
        // OPTIONAL 
        path.on('mousemove', function(d) {
          tooltip.style('top', (d3.event.layerY + 10) + 'px')
            .style('left', (d3.event.layerX + 10) + 'px');
        });
    p If you didn't want the tooltip to stay in one place, you could add this after the <code>mouseout</code> event handler. (In the source code it's there but commented out.) It uses D3's handy <code>event</code>, which contains information about the event that just fired, to determine where on the chart the mouse currently is. Then it adjusts the <code>top</code> and <code>left</code> properties of the tooltip so that it will be 10px to the right and 10px below the cursor. That way the tooltip follows the cursor around for as long as its hovering over one of the segments <span class="image-wrapper" data-width="434" data-height="291" data-src="/img/#{category.slug}/#{post.slug}/dog-follow.gif"></span>. 
    p Mouse events are critical to interactivity, but so far we've only harnessed passive events, like hovering. In <a href="/d3-js-step-by-step/step-6-animating-interactivity">Step 6</a> we'll add a click event, which provides a more active form of interaction. Before that, though, you may wish to look over the full code as it stands at this point:
    div.lazy-code(data-src="/static/d3-js-step-by-step/step-5-adding-tooltips.html", data-language="html")
      button.expand.small.secondary Display Full Code for Step 5

