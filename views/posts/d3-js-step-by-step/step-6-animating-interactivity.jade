extends ../../post

block content
  section.panel
    h3 TL;DR
    p This post is part of a series that explores some key concepts in D3.js by building up an example, step by step, from a bare-bones pie chart to an interactive, animated donut chart that loads external data. For the enough-with-the-jibber-jabber-show-me-the-code types out there, here's a breakdown of the steps we'll be covering:
    ul
      li <a href="/d3-js-step-by-step/step-0-intro">Step 0: Intro</a>
      li <a href="/d3-js-step-by-step/step-1-a-basic-pie-chart">Step 1: A Basic Pie Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-1-a-basic-pie-chart.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/kgukfV?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-2-a-basic-donut-chart">Step 2: A Basic Donut Chart</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-2-a-basic-donut-chart.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/Zfv7x6?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-3-adding-a-legend">Step 3: Adding a Legend</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-3-adding-a-legend.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/gE1xQu?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-4-loading-external-data">Step 4: Loading External Data</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-4-loading-external-data.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/3naIzX?p=info" target="_blank">Demo</a>)
      li <a href="/d3-js-step-by-step/step-5-adding-tooltips">Step 5: Adding Tooltips</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-5-adding-tooltips.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/44O53d?p=info" target="_blank">Demo</a>)
      li.bold <a href="/d3-js-step-by-step/step-6-animating-interactivity">Step 6: Animating Interactivity</a> (<a href="https://github.com/zeroviscosity/d3-js-step-by-step/blob/master/step-6-animating-interactivity.html" target="_blank">Code</a> | <a href="http://plnkr.co/edit/x1xD82?p=info" target="_blank">Demo</a>) &larr; You Are Here
    p <strong>NOTE:</strong> Because we're building things up step by step, the source code contains <code>NEW</code>, <code>UPDATED</code> and <code>REMOVED</code> comments to annotate the lines that have been added, altered or deleted relative to the previous step.

  section
    p Here we are at Step 6; we've come a long ways. Now it's time to put the cherry on top <span class="image-wrapper" data-width="400" data-height="310" data-src="/img/#{category.slug}/#{post.slug}/dog-cake.gif"></span>. Try clicking on the coloured squares in the legend and you'll see what I mean:
    iframe#demo-step-6.centered(src="/static/d3-js-step-by-step/step-6-animating-interactivity.html", height="410", width="380", border="0", seamless)
    p We're going to allow days of the week to be toggled on and off, and have the chart adjust itself in an animated fashion. We'll also update the tooltip so that the percent value is the percent of the weekdays currently enabled.
    p First, though, we'll add a title because what good is a chart without a title?
    pre
      code.html
        :code
          <h1>Toronto Parking Tickets by Weekday in 2012</h1>
    p And we'll add some style to it:
    pre
      code.css.
        h1 {
          font-size: 14px; 
          text-align: center;
        }         
    p We'll also center the entire chart:
    pre
      code.css.
        #chart {
          height: 360px;
          margin: 0 auto;                            /* NEW */
          position: relative;
          width: 360px;
        }
    p While we're CSSing we'll add the following, which is needed for the toggle effect on the coloured squares:
    pre
      code.css.
        rect {
          cursor: pointer;                           /* NEW */
          stroke-width: 2;
        }
        rect.disabled {                              /* NEW */
          fill: transparent !important;              /* NEW */
        }                                            /* NEW */
    p Enough with the tedium, let's get to some code. The first thing we need to do is add an <code>enabled</code> property to each entry in the dataset so that we can track which ones are on and which ones are off. We'll do this right after we cast the <code>count</code> property to a number since we're already iterating through the collection:
    pre
      code.javascript.
        d3.csv('weekdays.csv', function(error, dataset) {
          dataset.forEach(function(d) {
            d.count = +d.count;
            d.enabled = true;                        // NEW
          });
          // ...
          // More code
          // ...
    p There are a couple of other house-keeping tasks to do <span class="image-wrapper" data-width="304" data-height="236" data-src="/img/#{category.slug}/#{post.slug}/cat-broom.gif"></span>. The first is to add a <code>_current</code> property to each <code>path</code>. This will be necessary for a smooth animation:
    pre
      code.javascript.
        var path = svg.selectAll('path')
          .data(pie(dataset))
          .enter()
          .append('path')
          .attr('d', arc)
          .attr('fill', function(d, i) { 
            return color(d.data.label); 
          })                                         // UPDATED (removed semicolon)
          .each(function(d) { this._current = d; }); // NEW
    p We also need to change the way we calculate the total number of parking tickets in the <code>mouseover</code> event handler: 
    pre
      code.javascript.
        path.on('mouseover', function(d) {
          var total = d3.sum(dataset.map(function(d) {
            return (d.enabled) ? d.count : 0;        // UPDATED
          }));
          // ...
          // More code
          // ...          
    p Instead of just extracting the <code>count</code> we're now checking to see if the entry is enabled. If it isn't we return 0 instead of its usual value. If you try turning off a few days of the week in the <a href="#demo-step-6">demo</a>, you should see the percentages in the tooltip increase.
    p With the set up out of the way, we can get down to business. We're going to attach a <code>click</code> event handler to the coloured squares:
    pre
      code.javascript.
        legend.append('rect')
          .attr('width', legendRectSize)
          .attr('height', legendRectSize)                                   
          .style('fill', color)
          .style('stroke', color)                       // UPDATED (removed semicolon)
          .on('click', function(label) {                // NEW
            // ...
            // A bunch of code
            // ...
          });                                           // NEW
    p Let's dive into that event handler. It's a bit of a doozy:
    pre
      code.javascript.
        // ...
        // More code
        // ...
        .on('click', function(label) {
          var rect = d3.select(this);
          var enabled = true;
          var totalEnabled = d3.sum(dataset.map(function(d) {
            return (d.enabled) ? 1 : 0;
          }));
          
          if (rect.attr('class') === 'disabled') {
            rect.attr('class', '');
          } else {
            if (totalEnabled < 2) return;
            rect.attr('class', 'disabled');
            enabled = false;
          }

          pie.value(function(d) {
            if (d.label === label) d.enabled = enabled;
            return (d.enabled) ? d.count : 0;
          });

          path = path.data(pie(dataset));

          path.transition()
            .duration(750)
            .attrTween('d', function(d) {
              var interpolate = d3.interpolate(this._current, d);
              this._current = interpolate(0);
              return function(t) {
                return arc(interpolate(t));
              };
            });
        });
    p There's a lot going on here, so let's take it one step at a time:
    ol
      li <code>this</code> refers to the coloured square that was clicked. We wrap it using D3's <code>select()</code> and assign it to <code>rect</code>. The wrapping is done to make it easier access its attributes.
      li We set <code>enabled</code> to be <code>true</code> by default.
      li We don't want to allow all of the weekdays to be disabled, so we're going to find out how many are currently enabled so that we can exit if the user tries to break things <span class="image-wrapper" data-width="320" data-height="248" data-src="/img/#{category.slug}/#{post.slug}/walk-into-glass.gif"></span>. We calculate <code>totalEnabled</code> by iterating over the dataset, returning 1 for each enabled entry, and then summing those up.
      li We'll use the class <em>disabled</em> to flag squares that have been, well, disabled. We check if the current square is disabled and if it is, we remove the <em>disabled</em> class and let <code>enabled</code> remain <code>true</code>. 
      li If the square is enabled, we first check how many squares we previously determined were enabled. If it's less than two, we stop dead in our tracks. Otherwise we flag the square as <em>disabled</em> and set <code>enabled</code> to <code>false</code>.
      li The next step is similar to what we did earlier for the tooltip: We're going to redefine the way <code>pie</code> retrieves values from our dataset. We first check if the entry in question has a label that matches the label of the coloured square that was clicked. If it does we take this opportunity to update the <code>enabled</code> property. Then we either return the <code>count</code> or 0 based on the entry's status.
      li We can then update <code>path</code> by providing its <code>data()</code> method with the updated <code>pie</code>.
      li The last step is to animate the <a href="https://github.com/mbostock/d3/wiki/Transitions" target="_blank">transition</a>. The <code>duration()</code> <a href="https://github.com/mbostock/d3/wiki/Transitions#duration" target="_blank">method</a> should be be clear enough. The <code>attrTween()</code> <a href="https://github.com/mbostock/d3/wiki/Transitions#attrTween" target="_blank">method</a> needs some explaining, though. The 'd' parameter specifies that it's the <code>d</code> attribute that we'll be animating. This should not be confused with the <code>d</code> parameter passed to the callback. (There are a lot of d's in D3 code.) The parameter <code>d</code> refers to the updated data point&mdash;the one resulting from the update to <code>pie</code>. <code>this</code> refers to the current <code>path</code> element. That allows us to know both the current value, <code>this._current</code>, which we defined earlier, and the new value <code>d</code> and <a href="https://github.com/mbostock/d3/wiki/Transitions#d3_interpolate" target="_blank">interpolate</a> between them. Like the <code>.selectAll(el).data(data).enter().append(el)</code> pattern we first saw in <a href="/d3-js-step-by-step/step-1-a-basic-pie-chart">Step 1</a>, the code in this <code>attrTween</code> callback is a pattern you'll see in many examples that involve animation.
    p Animation is tricky <span class="image-wrapper" data-width="400" data-height="292" data-src="/img/#{category.slug}/#{post.slug}/zebra-sofa.gif"></span>. It's one of the most&mdash;if not <em>the</em> most&mdash;advanced topics in D3. We've just scratched the surface here but hopefully it's enough to get you started.
    p This series has endeavoured to shed light on some of the fundamental ideas in D3 and, in doing so, to make it more approachable. Whatever it is that you're hoping to achieve with D3, you'll find inspiration in the <a href="https://github.com/mbostock/d3/wiki/Gallery" target="_blank">gallery</a>. If you aren't impressed with what you can find there, either you're from the future or you may have suffered some sort of brain injury, in which case I suggest visiting a hospital ASAP.
    p Regardless, we have reached the end of our pie/donut chart journey. Here is the final code. Review it at your leisure:
    div.lazy-code(data-src="/static/d3-js-step-by-step/step-6-animating-interactivity.html", data-language="html")
      button.expand.small.secondary Display Full Code for Step 6

