extends ../post

block content
  div.panel This post grew out of a talk I did on D3 at a DVTO meetup.
  p D3.js, in case you are unfamiliar with it, is a powerful and flexible JavaScript library for creating interactive data visualizations with HTML, SVG and CSS. D3 stands for Data-Driven Documents and it is behind some of the most innovative and engaging visualizations currently on the web. On <a href="http://d3js.org/" target="_blank">d3js.org</a> you can find a wide variety of examples in addition to extensive documentation. I think it is one of the most exciting projects in the JavaScript ecosystem.
  p Even experienced JavaScript developers can find D3 daunting at first. There are <em>so</em> many methods available. The key, however, is to keep calm <span class="image-wrapper" data-width="400" data-height="225" data-src="https://s3.amazonaws.com/zeroviscosity/d3-js-essentials-part-1-a-pie-donut-chart/panic.gif"></span> and take it one step at a time. Luckily, D3 makes that easy because each method has one single task. It reminds me of <a href="http://www.steamwhistle.ca/" target="_blank">Steam Whistle</a>, a brewing company here in Toronto, whose motto is:
  blockquote Do one thing really, really well. <span class="image-wrapper" data-width="400" data-height="250" data-src="https://s3.amazonaws.com/zeroviscosity/d3-js-essentials-part-1-a-pie-donut-chart/steam-whistle.jpg"></span>
  p If you were to look at the HTML behind that chart, you would see the following:
  pre
    code.html
      :code
        <svg width="960" height="500">
          <g transform="translate(480,250)">
            <path d="M-141.06846055019358,-194.16407864998737A240,240 0 0,1 -4.408728470783257e-14,-240L0,0Z" fill="#1f77b4"></path>
            <path d="M-228.25356391083685,74.16407864998737A240,240 0 0,1 -141.06846055019358,-194.16407864998737L0,0Z" fill="#ff7f0e"></path>
            <path d="M141.06846055019355,194.1640786499874A240,240 0 0,1 -228.25356391083685,74.16407864998737L0,0Z" fill="#2ca02c"></path>
            <path d="M0,-240A240,240 0 0,1 141.06846055019355,194.1640786499874L0,0Z" fill="#d62728"></path>
          </g>
        </svg>
  p For now let's just ignore the stuff in the <code>d</code> attribute:
  pre
    code.html
      :code
        <svg width="960" height="500">
          <g transform="translate(480,250)">
            <path d="M-141.06..." fill="#1f77b4"></path>
            <path d="M-228.25..." fill="#ff7f0e"></path>
            <path d="M141.068..." fill="#2ca02c"></path>
            <path d="M0,-240A..." fill="#d62728"></path>
          </g>
        </svg>
  p That doesn't look too bad. 
  pre
    code.javascript
      :code
        (function() {
          'use strict';

          var data = [10, 20, 30, 40];

          var width = 960,
            height = 500,
            radius = Math.min(width, height) / 2;

          var color = d3.scale.category10();

          var arc = d3.svg.arc()
            .outerRadius(radius - 10);

          var pie = d3.layout.pie() 
            .value(function(d) { return d; });

          var svg = d3.select('body')
            .append('svg')
            .attr('width', width)
            .attr('height', height)
            .append('g')
            .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

          var path = svg.selectAll('path')
            .data(pie(data))
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', function(d, i) { return color(i); });
        })();
  p The finished product:
  pre
    code.html
      :code
        <!DOCTYPE html>
        <html>
          <head>
            <meta charset="utf-8" />
            <title>Pie Chart v5</title>
            <style>
            body {
              font: 10px sans-serif;
            }
            form {
              left: 250px;
              position: absolute;
            }
            label {
              cursor: pointer;
            }
            .tooltip {
              background: #eee;
              box-shadow: 0 0 5px #999999;
              color: #333;
              padding: 8px;
              position: absolute;
              text-align: center;
              visibility: hidden;
              z-index: 10;
            }
            </style>
          </head>
          <body>
            <form>
              <h3>Include Ontario:</h3>
              <label><input type="radio" name="ontario" value="yes" checked> Yes</label>
              <label><input type="radio" name="ontario" value="no"> No</label>
            </form>
            <script src="d3.v3.min.js"></script>
            <script>
            (function(){
              'use strict';

              var width = 960,
                  height = 500,
                  radius = Math.min(width, height) / 2;

              var color = d3.scale.category10();

              var arc = d3.svg.arc()
                .outerRadius(radius - 10)
                .innerRadius(radius - 110);

              var pie = d3.layout.pie()
                .value(function(d) { return d.count; })
                .sort(null);

              var tooltip = d3.select('body')
                .append('div')
                .attr('class', 'tooltip');

              var tooltipOn = function(d, i) {
                var content = '<div>' + d.data.province + '</div><div>' + d.data.count + '</div>';
                tooltip.html(content)
                  .style('visibility', 'visible');
              };

              var tooltipMove = function(d, i) {
                tooltip.style('top', (d3.event.pageY + 10) + 'px')
                  .style('left', (d3.event.pageX + 10) + 'px');
              };
         
              var tooltipOff = function() {
                tooltip.style('visibility', 'hidden');
              };

              var svg = d3.select('body')
                .append('svg')
                .attr('width', width)
                .attr('height', height)
                .append('g')
                .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')');

              var arcTween = function(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function(t) {
                  return arc(i(t));
                };
              };

              d3.csv('provinces.csv', function(error, data) {
                data.forEach(function(d) {
                  d.count = +d.count;
                });

                var path = svg.datum(data)
                  .selectAll('path')
                  .data(pie)
                  .enter()
                  .append('path')
                  .attr('d', arc)
                  .attr('fill', function(d, i) { return color(d.data.province); })
                  .each(function(d) { this._current = d; });

                path.on('mouseover', tooltipOn)
                  .on('mousemove', tooltipMove)
                  .on('mouseout', tooltipOff);

                var legend = svg.selectAll('.legend')
                  .data(color.domain())
                  .enter()
                  .append('g')
                  .attr('class', 'legend')
                  .attr('transform', function(d, i) { 
                    return 'translate(0,' + (i * 20 - 100) + ')'; 
                  });

                legend.append('rect')
                  .attr('width', 18)
                  .attr('height', 18)
                  .attr('x', -18)
                  .style('fill', color);

                legend.append('text')
                  .attr('x', 4)
                  .attr('y', 9)
                  .text(function(d) { return d; });

                var change = function() {
                  if (this.value === 'yes') {
                    pie.value(function(d) { return d.count; }); 
                  } else {
                    pie.value(function(d) { return (d.province === 'ON') ? 0 : d.count; });
                  }
                  path = path.data(pie);
                  path.transition().duration(750).attrTween('d', arcTween);
                };

                d3.selectAll('input').on('change', change);
              });
            })();
            </script>
          </body>
        </html>

block script
